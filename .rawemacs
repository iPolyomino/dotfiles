;; -*- Emacs-Lisp -*-
(setq initial-buffer-choice t)

;; swap BS and DEL
(keyboard-translate ?\C-h ?\C-?)

;; X11 specific
(when (eq window-system 'x)
  (scroll-bar-mode -1)
  (set-default-font "Source Code Pro")
  (set-face-attribute 'default nil :height 180))

(put 'upcase-region 'disabled nil)

;; disable scratch message
(setq initial-scratch-message "")

;; Japanese settings
(set-locale-environment nil)
(set-language-environment "Japanese")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)

;; don't show startup message
(setq inhibit-startup-message t)

;; force to use space
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)

;; don't make backup file
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq delete-auto-save-files t)

;; display code
(setq eol-mnemonic-dos "(CRLF)")
(setq eol-mnemonic-mac "(CR)")
(setq eol-mnemonic-unix "(LF)")

;; display line number
(global-linum-mode t)
(setq linum-format "%4d")

(global-hl-line-mode t)
(show-paren-mode 1)
(global-whitespace-mode 1)
(setq scroll-conservatively 1)

(menu-bar-mode -1)
(tool-bar-mode -1)

(fset 'yes-or-no-p 'y-or-n-p)

;; package setup

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))

(package-initialize)

;; latex build
(setq org-latex-pdf-process
    '("platex %b.tex" "platex %b.tex" "dvipdfmx %b.dvi"))

;; Japanese font
(set-fontset-font t 'japanese-jisx0208
                  (font-spec :family "IPAExGothic"))

;; delete backward char
(keyboard-translate ?\C-h ?\C-?)

;; mozc
(require 'mozc)
(setq default-input-method "japanese-mozc")

;; load path
(setq load-path
      (append (list nil
                    (expand-file-name "~/lisp"))
              load-path))

;; doc-annotatesc
(setq doc-view-scale-internally nil)
(add-hook 'doc-view-mode-hook
          '(lambda ()
             (local-set-key "c" 'doc-annotate-add-annotation)
             (local-set-key [mouse-1] 'doc-annotate-add-annotation)))
(autoload 'doc-annotate-mode "doc-annotate")
(autoload 'doc-annotate-add-annotation "doc-annotate")
(add-to-list 'auto-mode-alist '("\\.ant$" . doc-annotate-mode))

;; zf
(require 'zf)
(zf-mode 1)

;; lookup
(setq lookup-search-agents
    '(
      (ndeb "~/dict/gakken_personal")
      ))
(setq lookup-enable-splash nil)
(autoload 'lookup "lookup" nil t)
(autoload 'lookup-region "lookup" nil t)
(autoload 'lookup-pattern "lookup" nil t)
(global-set-key "\C-c\C-l" 'lookup)
(global-set-key "\C-cy" 'lookup-region)
(global-set-key "\C-c\C-y" 'lookup-pattern)
(setq lookup-default-dictionary-options
      '((:stemmer .  stem-english)))
(setq lookup-use-kakasi nil)
